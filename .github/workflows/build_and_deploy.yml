name: CI_CD
on:
  push:
    tags:
      - "*"
    branches:
      - 'main'
      - 'master'

env:
  APP_NAME: geogebra-app

jobs:
  build-native-executable:
    name: 'Build native executable'
    if: contains(github.ref, 'tags')
    strategy:
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        include:
          - os: 'ubuntu-latest'
            label: 'linux'
            executable_extension: ''
          - os: 'macos-latest'
            label: 'macos'
            executable_extension: ''
          - os: 'windows-latest'
            label: 'windows'
            executable_extension: '.exe'
    runs-on: ${{matrix.os}}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Branch name
        id: branch_name
        run: |
          PROJECT_VERSION=`jq -r .package.version src-tauri/tauri.conf.json`
          echo ::set-output name=PROJECT_VERSION::${PROJECT_VERSION}
          echo ::set-output name=SOURCE_NAME::${GITHUB_REF#refs/*/}
          echo ::set-output name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}
          echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}
        shell: bash
      - name: Use Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: 'npm'
      - name: check toolchain version
        run: |
          node --version
          npm --version
          rustc --version
          cargo --version
      - name: 'Setup for linux'
        if: matrix.os == 'ubuntu-latest'
        run: |
          # https://ubuntu.com/blog/statement-on-32-bit-i386-packages-for-ubuntu-19-10-and-20-04-lts
          # https://askubuntu.com/questions/1252062/how-to-install-libncurses-so-5-in-ubuntu-20-04
          # https://askubuntu.com/questions/522372/installing-32-bit-libraries-on-ubuntu-14-04-lts-64-bit
          # sudo dpkg --add-architecture i386
          sudo apt update
          sudo add-apt-repository universe
          sudo dpkg --add-architecture i386 
          sudo apt update
          sudo apt upgrade
          sudo apt install -y \
            libwebkit2gtk-4.0-dev \
            build-essential \
            curl \
            wget \
            libssl-dev \
            libssl-dev:i386 \
            libgtk-3-dev \
            patchelf \
            librsvg2-dev \
            libappindicator3-dev \
            gcc-multilib \
            g++-multilib
      - name: 'Setup for macos'
        if: matrix.os == 'macos-latest'
        run: |
          echo 'ok'
      - name: 'Setup for windows'
        if: matrix.os == 'windows-latest'
        run: |
          # choco install visualstudio2019-workload-vctools
          # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md#visual-studio-enterprise-2019
          echo 'ok'
      - name: Build Native binarys on ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "build native binarys..."
          rustup target add x86_64-unknown-linux-gnu
          rustup target add i686-unknown-linux-gnu
          yarn
          yarn tauri info
          yarn tauri build -t x86_64-unknown-linux-gnu
          export OPENSSL_LIB_DIR=/usr/lib/i386-linux-gnu/
          export OPENSSL_INCLUDE_DIR=/usr/include/openssl/
          yarn tauri build -t i686-unknown-linux-gnu || true
          echo "build native binarys finished"
      - name: Build Native binarys on macos
        if: matrix.os == 'macos-latest'
        run: |
          echo "build native binarys..."
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
          yarn
          yarn tauri info
          yarn tauri build -t x86_64-apple-darwin
          yarn tauri build -t aarch64-apple-darwin
          echo "build native binarys finished"
      - name: Build Native binarys on windows
        if: matrix.os == 'windows-latest'
        run: |
          echo "build native binarys..."
          rustup target add x86_64-pc-windows-msvc
          rustup target add i686-pc-windows-msvc
          yarn
          yarn tauri info
          yarn tauri build -t x86_64-pc-windows-msvc
          yarn tauri build -t i686-pc-windows-msvc || true
          echo "build native binarys finished"
      - name: Display structure of build files
        run: |
          ls -lR src-tauri/target/
        shell: bash

      # - name: Edit binary resources on windows
      #   if: matrix.os == 'windows-latest'
      #   run: |
      #     echo "edit binary resources"
      #     ".\resources\rcedit-x64.exe" build/${{env.APP_NAME}}${{matrix.executable_extension}} -set-icon resources/app_icon.ico -set-file-version ${{steps.environment.outputs.PROJECT_VERSION}} -set-product-version ${{steps.environment.outputs.PROJECT_VERSION}}  -set-version-string ProductName ${{env.APP_NAME}} -set-version-string LegalCopyright MIT
      #   shell: bash
      # - name: Prepare release files
      #   run: |
      #     7z a -tzip ${{env.APP_NAME}}-${{matrix.label}}-${{steps.environment.outputs.PROJECT_VERSION}}.zip -r ./build/*
      #   shell: bash

      # the directory structure of build files
      # linux
      # src-tauri/target/x86_64-unknown-linux-gnu/release/geogebra-app
      # src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/geogebra-app_0.1.0_amd64.AppImage
      # src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/deb/geogebra-app_0.1.0_amd64.deb
      # macos
      # src-tauri/target/x86_64-apple-darwin/release/geogebra-app
      # src-tauri/target/x86_64-apple-darwin/release/bundle/macos/geogebra-app.app
      # src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/geogebra-app_0.1.0_x64.dmg
      # src-tauri/target/aarch64-apple-darwin/release/geogebra-app
      # src-tauri/target/aarch64-apple-darwin/release/bundle/macos/geogebra-app.app
      # src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/geogebra-app_0.1.0_aarch64.dmg
      # windows
      # src-tauri/target/x86_64-pc-windows-msvc/release/geogebra-app.exe
      # src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/geogebra-app_0.1.0_x64.msi
      # src-tauri/target/i686-pc-windows-msvc/release/geogebra-app.exe
      # src-tauri/target/i686-pc-windows-msvc/release/bundle/msi/geogebra-app_0.1.0_x64.msi
      - name: Prepare release files on ${{matrix.label}}
        continue-on-error: true
        if: matrix.os == 'ubuntu-latest'
        run: |
          mv src-tauri/target/x86_64-unknown-linux-gnu/release/${{env.APP_NAME}}${{matrix.executable_extension}} ${{env.APP_NAME}}-${{matrix.label}}-${{steps.branch_name.outputs.PROJECT_VERSION}}_amd64${{matrix.executable_extension}}
          mv src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/${{env.APP_NAME}}_${{steps.branch_name.outputs.PROJECT_VERSION}}_amd64.AppImage ${{env.APP_NAME}}-${{matrix.label}}-${{steps.branch_name.outputs.PROJECT_VERSION}}_amd64.AppImage
          mv src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/deb/${{env.APP_NAME}}_${{steps.branch_name.outputs.PROJECT_VERSION}}_amd64.deb ${{env.APP_NAME}}-${{matrix.label}}-${{steps.branch_name.outputs.PROJECT_VERSION}}_amd64.deb
        shell: bash
      - name: Prepare release files on ${{matrix.label}}
        continue-on-error: true
        if: matrix.os == 'macos-latest'
        run: |
          mv src-tauri/target/x86_64-apple-darwin/release/${{env.APP_NAME}}${{matrix.executable_extension}} ${{env.APP_NAME}}-${{matrix.label}}-${{steps.branch_name.outputs.PROJECT_VERSION}}_x64${{matrix.executable_extension}}
          mv src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/${{env.APP_NAME}}_${{steps.branch_name.outputs.PROJECT_VERSION}}_x64.dmg ${{env.APP_NAME}}-${{matrix.label}}-${{steps.branch_name.outputs.PROJECT_VERSION}}_x64.dmg
          7z a -tzip ${{env.APP_NAME}}-${{matrix.label}}-${{steps.branch_name.outputs.PROJECT_VERSION}}_x64.app.zip ./src-tauri/target/x86_64-apple-darwin/release/bundle/macos/${{env.APP_NAME}}.app
          mv src-tauri/target/aarch64-apple-darwin/release/${{env.APP_NAME}}${{matrix.executable_extension}} ${{env.APP_NAME}}-${{matrix.label}}-${{steps.branch_name.outputs.PROJECT_VERSION}}_aarch64${{matrix.executable_extension}}
          mv src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/${{env.APP_NAME}}_${{steps.branch_name.outputs.PROJECT_VERSION}}_aarch64.dmg ${{env.APP_NAME}}-${{matrix.label}}-${{steps.branch_name.outputs.PROJECT_VERSION}}_aarch64.dmg
          7z a -tzip ${{env.APP_NAME}}-${{matrix.label}}-${{steps.branch_name.outputs.PROJECT_VERSION}}_aarch64.app.zip ./src-tauri/target/aarch64-apple-darwin/release/bundle/macos/${{env.APP_NAME}}.app
        shell: bash
      - name: Prepare release files on ${{matrix.label}}
        continue-on-error: true
        if: matrix.os == 'windows-latest'
        run: |
          mv src-tauri/target/x86_64-pc-windows-msvc/release/${{env.APP_NAME}}${{matrix.executable_extension}} ${{env.APP_NAME}}-${{matrix.label}}-${{steps.branch_name.outputs.PROJECT_VERSION}}_x64${{matrix.executable_extension}}
          mv src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/${{env.APP_NAME}}_${{steps.branch_name.outputs.PROJECT_VERSION}}_x64_en-US.msi ${{env.APP_NAME}}-${{matrix.label}}-${{steps.branch_name.outputs.PROJECT_VERSION}}_x64.msi
          mv src-tauri/target/i686-pc-windows-msvc/release/${{env.APP_NAME}}${{matrix.executable_extension}} ${{env.APP_NAME}}-${{matrix.label}}-${{steps.branch_name.outputs.PROJECT_VERSION}}_x86${{matrix.executable_extension}}
          mv src-tauri/target/i686-pc-windows-msvc/release/bundle/msi/${{env.APP_NAME}}_${{steps.branch_name.outputs.PROJECT_VERSION}}_x86_en-US.msi ${{env.APP_NAME}}-${{matrix.label}}-${{steps.branch_name.outputs.PROJECT_VERSION}}_x86.msi
        shell: bash
      - name: Display structure of build files
        run: |
          ls -l .
        shell: bash
        
      # files prepared to publish to release
      # platform executable
      ## ${{env.APP_NAME}}-${{matrix.label}}-${{steps.branch_name.outputs.PROJECT_VERSION}}${{matrix.executable_extension}} 
      # linux bundles
      # ${{env.APP_NAME}}-${{matrix.label}}-${{steps.branch_name.outputs.PROJECT_VERSION}}_amd64
      # ${{env.APP_NAME}}-${{matrix.label}}-${{steps.branch_name.outputs.PROJECT_VERSION}}_amd64.AppImage 
      # ${{env.APP_NAME}}-${{matrix.label}}-${{steps.branch_name.outputs.PROJECT_VERSION}}_amd64.deb 
      # macos bundles
      # ${{env.APP_NAME}}-${{matrix.label}}-${{steps.branch_name.outputs.PROJECT_VERSION}}_x64 
      # ${{env.APP_NAME}}-${{matrix.label}}-${{steps.branch_name.outputs.PROJECT_VERSION}}_x64.dmg 
      # ${{env.APP_NAME}}-${{matrix.label}}-${{steps.branch_name.outputs.PROJECT_VERSION}}_x64.app.zip 
      # ${{env.APP_NAME}}-${{matrix.label}}-${{steps.branch_name.outputs.PROJECT_VERSION}}_aarch64 
      # ${{env.APP_NAME}}-${{matrix.label}}-${{steps.branch_name.outputs.PROJECT_VERSION}}_aarch64.dmg 
      # ${{env.APP_NAME}}-${{matrix.label}}-${{steps.branch_name.outputs.PROJECT_VERSION}}_aarch64.app.zip 
      # windows bundles
      # ${{env.APP_NAME}}-${{matrix.label}}-${{steps.branch_name.outputs.PROJECT_VERSION}}_x64.exe
      # ${{env.APP_NAME}}-${{matrix.label}}-${{steps.branch_name.outputs.PROJECT_VERSION}}_x64.msi
      # ${{env.APP_NAME}}-${{matrix.label}}-${{steps.branch_name.outputs.PROJECT_VERSION}}_x86.exe
      # ${{env.APP_NAME}}-${{matrix.label}}-${{steps.branch_name.outputs.PROJECT_VERSION}}_x86.msi
      - name: 'Publish binary to release'
        continue-on-error: true
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          file: ${{env.APP_NAME}}-${{matrix.label}}-${{steps.branch_name.outputs.PROJECT_VERSION}}*
          tags: true
          draft: false
          overwrite: true